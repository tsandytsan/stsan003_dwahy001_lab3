
stsan003_dwahy001_lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000867  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b7  00000000  00000000  00000a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000258  00000000  00000000  000011e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001440  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000439  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000057  00000000  00000000  0000189d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	21 c0       	rjmp	.+66     	; 0xde <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:



int main(void)
{
	DDRB = 0xFE; PORTB = 0x01; // Configure port B's last 7 pins as outputs, first pin as input
  9e:	8e ef       	ldi	r24, 0xFE	; 254
  a0:	84 b9       	out	0x04, r24	; 4
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	85 b9       	out	0x05, r24	; 5
	DDRD = 0x00; PORTC = 0xFF; // Configure port D's 8 pins as inputs
  a6:	1a b8       	out	0x0a, r1	; 10
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	88 b9       	out	0x08, r24	; 8
		unsigned short carWeight = (PIND << 1) + PINB;
		unsigned char lastB = PINB & 0x01;
		unsigned char airBag = 0x00;
		
		if (carWeight >= enableWeight){
			airBag = 0x02;
  ac:	32 e0       	ldi	r19, 0x02	; 2
		}
		else if ((carWeight > 5) && (carWeight < enableWeight)){
			airBag = 0x04;
  ae:	54 e0       	ldi	r21, 0x04	; 4
		}
		else { airBag = 0x00;}
  b0:	40 e0       	ldi	r20, 0x00	; 0
	
	unsigned short enableWeight = 0x46;

	while (1)
    {
		unsigned short carWeight = (PIND << 1) + PINB;
  b2:	89 b1       	in	r24, 0x09	; 9
  b4:	23 b1       	in	r18, 0x03	; 3
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	82 0f       	add	r24, r18
  be:	91 1d       	adc	r25, r1
		unsigned char lastB = PINB & 0x01;
  c0:	23 b1       	in	r18, 0x03	; 3
  c2:	21 70       	andi	r18, 0x01	; 1
		unsigned char airBag = 0x00;
		
		if (carWeight >= enableWeight){
  c4:	86 34       	cpi	r24, 0x46	; 70
  c6:	91 05       	cpc	r25, r1
  c8:	20 f4       	brcc	.+8      	; 0xd2 <main+0x34>
			airBag = 0x02;
		}
		else if ((carWeight > 5) && (carWeight < enableWeight)){
  ca:	06 97       	sbiw	r24, 0x06	; 6
  cc:	20 f4       	brcc	.+8      	; 0xd6 <main+0x38>
			airBag = 0x04;
		}
		else { airBag = 0x00;}
  ce:	84 2f       	mov	r24, r20
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <main+0x3a>
		unsigned short carWeight = (PIND << 1) + PINB;
		unsigned char lastB = PINB & 0x01;
		unsigned char airBag = 0x00;
		
		if (carWeight >= enableWeight){
			airBag = 0x02;
  d2:	83 2f       	mov	r24, r19
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <main+0x3a>
		}
		else if ((carWeight > 5) && (carWeight < enableWeight)){
			airBag = 0x04;
  d6:	85 2f       	mov	r24, r21
		}
		else { airBag = 0x00;}
		PORTB = airBag | lastB;
  d8:	82 2b       	or	r24, r18
  da:	85 b9       	out	0x05, r24	; 5
	}
  dc:	ea cf       	rjmp	.-44     	; 0xb2 <main+0x14>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
